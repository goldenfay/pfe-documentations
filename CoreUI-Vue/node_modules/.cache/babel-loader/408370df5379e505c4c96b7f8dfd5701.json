{"remainingRequest":"/home/hads/Documents/CoreUI-Vue/node_modules/babel-loader/lib/index.js!/home/hads/Downloads/pycharm-community-2020.1/plugins/python-ce/helpers/MathJax/jax/output/HTML-CSS/autoload/multiline.js","dependencies":[{"path":"/home/hads/Downloads/pycharm-community-2020.1/plugins/python-ce/helpers/MathJax/jax/output/HTML-CSS/autoload/multiline.js","mtime":1586259854000},{"path":"/home/hads/Documents/CoreUI-Vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hads/Documents/CoreUI-Vue/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hads/Downloads/pycharm-community-2020.1/plugins/python-ce/helpers/MathJax/jax/output/HTML-CSS/autoload/multiline.js"],"names":["MathJax","Hub","Register","StartupHook","VERSION","MML","ElementJax","mml","HTMLCSS","OutputJax","PENALTY","newline","nobreak","goodbreak","badbreak","auto","toobig","nestfactor","spacefactor","spaceoffset","spacelimit","fence","close","ENDVALUES","linebreakstyle","mbase","Augment","HTMLlinebreakPenalty","HTMLmultiline","span","parent","inferred","type","data","length","isTop","Get","isMultiline","VALUES","getValues","LINEBREAKSTYLE","INFIXLINEBREAKSTYLE","lineleading","length2em","HTMLremoveColor","stack","createStack","HTMLgetScale","state","n","Y","scale","values","align","HTMLgetAlign","shift","HTMLgetShift","start","end","index","penalty","w","W","scanW","nest","broken","HTMLbetterBreak","linebreakWidth","HTMLaddLine","slice","INDENTALIGN","CENTER","isLast","style","width","bbox","HTMLhandleSpace","HTMLhandleColor","info","isToken","isEmbellished","embellished","CoreMO","linebreakContainer","i","m","better","concat","HTMLaddWidth","HTMLspanElement","paddingLeft","unEm","paddingRight","line","createBox","HTMLemptyBBox","first","last","HTMLmoveLine","HTMLcleanBBox","LHD","FONTDATA","baselineskip","leading","Math","max","d","h","alignBox","cur","prev","def","indentalignfirst","indentalignlast","indentalign","AUTO","displayAlign","LEFT","indentshiftfirst","indentshiftlast","indentshift","INDENTSHIFT","cwidth","displayIndent","indent","RIGHT","j","HTMLmoveSlice","HTMLmoveSpan","padding","HTMLcreateSliceSpan","HTMLcombineBBoxes","parentNode","removeChild","nextMathJaxSpan","id","color","SPAN","LAST","SLICE","cloneNode","appendChild","BEFORE","AFTER","document","getElementById","spanID","idPostfix","nextIsFirst","mfenced","dataI","open","push","k","msubsup","base","HTMLbaseW","HTMLdw","s","sup","sub","HTMLnotEmpty","box","firstChild","nextSibling","left","Em","mmultiscripts","dw","dx","BOX","msiePaddingWidthBug","name","presub","presup","STACK","addBox","placeBox","u","delta","v","px","mo","texClass","TEXCLASS","OPEN","CLOSE","linebreak","LINEBREAK","NEWLINE","offset","floor","Array","mspace","linebreakValue","hasDimAttr","mathbackground","background","TeXmathchoice","Core","maction","hitbox","SUPER","arguments","apply","HTMLhandleHitBox","semantics","Startup","signal","Post","Ajax","loadComplete","autoloadDir"],"mappings":"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","sourcesContent":["/* -*- Mode: Javascript; indent-tabs-mode:nil; js-indent-level: 2 -*- */\n/* vim: set ts=2 et sw=2 tw=80: */\n\n/*************************************************************\n *\n *  MathJax/jax/output/HTML-CSS/autoload/multiline.js\n *  \n *  Implements the HTML-CSS output for <mrow>'s that contain line breaks.\n *\n *  ---------------------------------------------------------------------\n *  \n *  Copyright (c) 2010-2015 The MathJax Consortium\n * \n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nMathJax.Hub.Register.StartupHook(\"HTML-CSS Jax Ready\",function () {\n  var VERSION = \"2.6.0\";\n  var MML = MathJax.ElementJax.mml,\n      HTMLCSS = MathJax.OutputJax[\"HTML-CSS\"];\n      \n  //\n  //  Penalties for the various line breaks\n  //\n  var PENALTY = {\n    newline:         0,\n    nobreak:   1000000,\n    goodbreak:   [-200],\n    badbreak:    [+200],\n    auto:           [0],\n    \n    toobig:        800,\n    nestfactor:    400,\n    spacefactor:  -100,\n    spaceoffset:     2,\n    spacelimit:      1,  // spaces larger than this get a penalty boost\n    fence:         500,\n    close:         500\n  };\n  \n  var ENDVALUES = {linebreakstyle: \"after\"};\n\n  \n  /**************************************************************************/\n  \n  MML.mbase.Augment({\n    HTMLlinebreakPenalty: PENALTY,\n    \n    /****************************************************************/\n    //\n    // Handle breaking an mrow into separate lines\n    //\n    HTMLmultiline: function (span) {\n\n      //\n      //  Find the parent element and mark it as multiline\n      //\n      var parent = this;\n      while (parent.inferred || (parent.parent && parent.parent.type === \"mrow\" &&\n             parent.parent.data.length === 1)) {parent = parent.parent}\n      var isTop = ((parent.type === \"math\" && parent.Get(\"display\") === \"block\") ||\n                    parent.type === \"mtd\");\n      parent.isMultiline = true;\n      \n      //\n      //  Default values for the line-breaking parameters\n      //\n      var VALUES = this.getValues(\n        \"linebreak\",\"linebreakstyle\",\"lineleading\",\"linebreakmultchar\",\n        \"indentalign\",\"indentshift\",\n        \"indentalignfirst\",\"indentshiftfirst\",\n        \"indentalignlast\",\"indentshiftlast\"\n      );\n      if (VALUES.linebreakstyle === MML.LINEBREAKSTYLE.INFIXLINEBREAKSTYLE) \n        {VALUES.linebreakstyle = this.Get(\"infixlinebreakstyle\")}\n      VALUES.lineleading = HTMLCSS.length2em(VALUES.lineleading,1,0.5);\n\n      //\n      //  Remove old color and break the span at its best line breaks\n      //\n      this.HTMLremoveColor(span);\n      var stack = HTMLCSS.createStack(span);\n      this.HTMLgetScale();\n      var state = {\n            n: 0, Y: 0,\n            scale: this.scale || 1,\n            isTop: isTop,\n            values: {},\n            VALUES: VALUES\n          },\n          align = this.HTMLgetAlign(state,{}),\n          shift = this.HTMLgetShift(state,{},align),\n          start = [],\n          end = {\n            index:[], penalty:PENALTY.nobreak,\n            w:0, W:shift, shift:shift, scanW:shift,\n            nest: 0\n          },\n          broken = false;\n          \n      while (this.HTMLbetterBreak(end,state) && \n             (end.scanW >= HTMLCSS.linebreakWidth || end.penalty === PENALTY.newline)) {\n        this.HTMLaddLine(stack,start,end.index,state,end.values,broken);\n        start = end.index.slice(0); broken = true;\n        align = this.HTMLgetAlign(state,end.values);\n        shift = this.HTMLgetShift(state,end.values,align);\n        if (align === MML.INDENTALIGN.CENTER) {shift = 0}\n        end.W = end.shift = end.scanW = shift; end.penalty = PENALTY.nobreak;\n      }\n      state.isLast = true;\n      this.HTMLaddLine(stack,start,[],state,ENDVALUES,broken);\n\n      //\n      //  Make top-level spans 100% wide.\n      //  Finish up the space and add the color again\n      //\n      if (isTop) {\n        stack.style.width = \"100%\";\n        if (parent.type === \"math\") {span.bbox.width = \"100%\"}\n      }\n      this.HTMLhandleSpace(span);\n      this.HTMLhandleColor(span);\n      span.bbox.isMultiline = true;\n\n      return span;\n    },\n\n    /****************************************************************/\n    //\n    //  Locate the next linebreak that is better than the current one\n    //\n    HTMLbetterBreak: function (info,state) {\n      if (this.isToken) {return false}  // FIXME: handle breaking of token elements\n      if (this.isEmbellished()) {\n        info.embellished = this;\n        return this.CoreMO().HTMLbetterBreak(info,state);\n      }\n      if (this.linebreakContainer) {return false}\n      //\n      //  Get the current breakpoint position and other data\n      //\n      var index = info.index.slice(0), i = info.index.shift(),\n          m = this.data.length, W, w, scanW, broken = (info.index.length > 0), better = false;\n      if (i == null) {i = -1}; if (!broken) {i++; info.W += info.w; info.w = 0}\n      scanW = info.scanW = info.W; info.nest++;\n      //\n      //  Look through the line for breakpoints,\n      //    (as long as we are not too far past the breaking width)\n      //\n      while (i < m && info.scanW < 1.33*HTMLCSS.linebreakWidth) {\n        if (this.data[i]) {\n          if (this.data[i].HTMLbetterBreak(info,state)) {\n            better = true; index = [i].concat(info.index); W = info.W; w = info.w;\n            if (info.penalty === PENALTY.newline) {\n              info.index = index;\n              if (info.nest) {info.nest--}\n              return true;\n            }\n          }\n          scanW = (broken ? info.scanW : this.HTMLaddWidth(i,info,scanW));\n        }\n        info.index = []; i++; broken = false;\n      }\n      if (info.nest) {info.nest--}\n      info.index = index;\n      if (better) {info.W = W; info.w = w}\n      return better;\n    },\n    HTMLaddWidth: function (i,info,scanW) {\n      if (this.data[i]) {\n        var span = this.data[i].HTMLspanElement();\n        scanW += span.bbox.w;\n        if (span.style.paddingLeft)  {scanW += HTMLCSS.unEm(span.style.paddingLeft)}\n        if (span.style.paddingRight) {scanW += HTMLCSS.unEm(span.style.paddingRight)}\n        info.W = info.scanW = scanW; info.w = 0;\n      }\n      return scanW;\n    },\n    \n    /****************************************************************/\n    //\n    //  Create a new line and move the required elements into it\n    //  Position it using proper alignment and indenting\n    //\n    HTMLaddLine: function (stack,start,end,state,values,broken) {\n      //\n      //  Create a box for the line, with empty BBox\n      //    fill it with the proper elements,\n      //    and clean up the bbox\n      //\n      line = HTMLCSS.createBox(stack);\n      line.bbox = this.HTMLemptyBBox({});\n      state.first = broken; state.last = true;\n      this.HTMLmoveLine(start,end,line,state,values);\n      this.HTMLcleanBBox(line.bbox);\n      //\n      //  Get the alignment and shift values\n      //\n      var align = this.HTMLgetAlign(state,values),\n          shift = this.HTMLgetShift(state,values,align);\n      //\n      //  Set the Y offset based on previous depth, leading, and current height\n      //\n      if (state.n > 0) {\n        var LHD = HTMLCSS.FONTDATA.baselineskip * state.scale;\n        var leading = (state.values.lineleading == null ? state.VALUES : state.values).lineleading * state.scale;\n        state.Y -= Math.max(LHD,state.d + line.bbox.h + leading);\n      }\n      //\n      //  Place the new line\n      //\n      HTMLCSS.alignBox(line,align,state.Y,shift);\n      //\n      //  Save the values needed for the future\n      //\n      state.d = line.bbox.d; state.values = values; state.n++;\n    },\n    \n    /****************************************************************/\n    //\n    //  Get alignment and shift values from the given data\n    //\n    HTMLgetAlign: function (state,values) {\n      var cur = values, prev = state.values, def = state.VALUES, align;\n      if (state.n === 0)     {align = cur.indentalignfirst || prev.indentalignfirst || def.indentalignfirst}\n      else if (state.isLast) {align = prev.indentalignlast || def.indentalignlast}\n      else                   {align = prev.indentalign || def.indentalign}\n      if (align === MML.INDENTALIGN.INDENTALIGN) {align = prev.indentalign || def.indentalign}\n      if (align === MML.INDENTALIGN.AUTO) {align = (state.isTop ? this.displayAlign : MML.INDENTALIGN.LEFT)}\n      return align;\n    },\n    HTMLgetShift: function (state,values,align) {\n      var cur = values, prev = state.values, def = state.VALUES, shift;\n      if (state.n === 0)     {shift = cur.indentshiftfirst || prev.indentshiftfirst || def.indentshiftfirst}\n      else if (state.isLast) {shift = prev.indentshiftlast || def.indentshiftlast}\n      else                   {shift = prev.indentshift || def.indentshift}\n      if (shift === MML.INDENTSHIFT.INDENTSHIFT) {shift = prev.indentshift || def.indentshift}\n      if (shift === \"auto\" || shift === \"\") {shift = \"0\"}\n      shift = HTMLCSS.length2em(shift,1,HTMLCSS.cwidth);\n      if (state.isTop && this.displayIndent !== \"0\") {\n        var indent = HTMLCSS.length2em(this.displayIndent,1,HTMLCSS.cwidth);\n        shift += (align === MML.INDENTALIGN.RIGHT ? -indent : indent);\n      }\n      return shift;\n    },\n    \n    /****************************************************************/\n    //\n    //  Move the selected elements into the new line's span,\n    //    moving whole items when possible, and parts of ones\n    //    that are split by a line break.\n    //  \n    HTMLmoveLine: function (start,end,span,state,values) {\n      var i = start[0], j = end[0];\n      if (i == null) {i = -1}; if (j == null) {j = this.data.length-1}\n      if (i === j && start.length > 1) {\n        //\n        //  If starting and ending in the same element move the subpiece to the new line\n        //\n        this.data[i].HTMLmoveSlice(start.slice(1),end.slice(1),span,state,values,\"paddingLeft\");\n      } else {\n        //\n        //  Otherwise, move the remainder of the initial item\n        //  and any others up to the last one\n        //\n        var last = state.last; state.last = false;\n        while (i < j) {\n          if (this.data[i]) {\n            if (start.length <= 1) {this.data[i].HTMLmoveSpan(span,state,values)}\n              else {this.data[i].HTMLmoveSlice(start.slice(1),[],span,state,values,\"paddingLeft\")}\n          }\n          i++; state.first = false; start = [];\n        }\n        //\n        //  If the last item is complete, move it,\n        //    otherwise move the first part of it up to the split\n        //\n        state.last = last;\n        if (this.data[i]) {\n          if (end.length <= 1) {this.data[i].HTMLmoveSpan(span,state,values)}\n            else {this.data[i].HTMLmoveSlice([],end.slice(1),span,state,values,\"paddingRight\")}\n        }\n      }\n    },\n    \n    /****************************************************************/\n    //\n    //  Split an element and copy the selected items into the new part\n    //\n    HTMLmoveSlice: function (start,end,span,state,values,padding) {\n      //\n      //  Get rid of color, if any (added back in later)\n      //  Create a new span for the slice of the element\n      //  Move the selected portion into the slice\n      //  If it is the last slice\n      //    Remove the original (now empty) span\n      //    Rename the Continue-0 span with the original name (for HTMLspanElement)\n      //    Add back the color\n      //\n      this.HTMLremoveColor();\n      var slice = this.HTMLcreateSliceSpan(span);\n      this.HTMLmoveLine(start,end,slice,state,values);\n      slice.style[padding] = \"\";\n      this.HTMLcombineBBoxes(slice,span.bbox);\n      this.HTMLcleanBBox(slice.bbox);\n      if (end.length === 0) {\n        span = this.HTMLspanElement();\n        span.parentNode.removeChild(span);\n        span.nextMathJaxSpan.id = span.id; var n = 0;\n        while (span = span.nextMathJaxSpan) {\n          var color = this.HTMLhandleColor(span);\n          if (color) {color.id += \"-MathJax-Continue-\"+n; n++}\n        }\n      }\n      return slice;\n    },\n\n    /****************************************************************/\n    //\n    //  Create a new span for an element that is split in two\n    //    Clone the original and update its ID.\n    //    Link the old span to the new one so we can find it later\n    //\n    HTMLcreateSliceSpan: function (span) {\n      var SPAN = this.HTMLspanElement(), n = 0;\n      var LAST = SPAN; while (LAST.nextMathJaxSpan) {LAST = LAST.nextMathJaxSpan; n++}\n      var SLICE = SPAN.cloneNode(false); LAST.nextMathJaxSpan = SLICE; SLICE.nextMathJaxSpan = null;\n      SLICE.id += \"-MathJax-Continue-\"+n;\n      SLICE.bbox = this.HTMLemptyBBox({});\n      return span.appendChild(SLICE);\n    },\n    \n    /****************************************************************/\n    //\n    //  Move an element from its original span to its new location in\n    //    a split element or the new line's span\n    //\n    HTMLmoveSpan: function (line,state,values) {\n      // FIXME:  handle linebreakstyle === \"duplicate\"\n      // FIXME:  handle linebreakmultchar\n      if (!(state.first || state.last) ||\n           (state.first && state.values.linebreakstyle === MML.LINEBREAKSTYLE.BEFORE) ||\n           (state.last && values.linebreakstyle === MML.LINEBREAKSTYLE.AFTER)) {\n        //\n        //  Move color and span\n        //\n\tvar color = document.getElementById(\"MathJax-Color-\"+this.spanID+HTMLCSS.idPostfix);\n        if (color) {line.appendChild(color)}\n        var span = this.HTMLspanElement();\n        line.appendChild(span);\n        //\n        //  If it is last, remove right padding\n        //  If it is first, remove left padding and recolor\n        //\n        if (state.last) {span.style.paddingRight = \"\"}\n        if (state.first || state.nextIsFirst) {\n          span.style.paddingLeft = \"\";\n          if (color) {this.HTMLremoveColor(span); this.HTMLhandleColor(span)}\n        }\n        if (state.first && span.bbox.w === 0) {state.nextIsFirst = true}\n          else {delete state.nextIsFirst}\n        //\n        //  Update bounding box\n        //\n        this.HTMLcombineBBoxes(this,line.bbox);\n      }\n    }\n  });\n\n  /**************************************************************************/\n\n  MML.mfenced.Augment({\n    HTMLbetterBreak: function (info,state) {\n      //\n      //  Get the current breakpoint position and other data\n      //\n      var index = info.index.slice(0), i = info.index.shift(),\n          m = this.data.length, W, w, scanW, broken = (info.index.length > 0), better = false;\n      if (i == null) {i = -1}; if (!broken) {i++; info.W += info.w; info.w = 0}\n      scanW = info.scanW = info.W; info.nest++;\n      //\n      //  Create indices that include the delimiters and separators\n      //\n      if (!this.dataI) {\n        this.dataI = [];\n        if (this.data.open) {this.dataI.push(\"open\")}\n        if (m) {this.dataI.push(0)}\n        for (var j = 1; j < m; j++) {\n          if (this.data[\"sep\"+j]) {this.dataI.push(\"sep\"+j)}\n          this.dataI.push(j);\n        }\n        if (this.data.close) {this.dataI.push(\"close\")}\n      }\n      m = this.dataI.length;\n      //\n      //  Look through the line for breakpoints, including the open, close, and separators\n      //    (as long as we are not too far past the breaking width)\n      //\n      while (i < m && info.scanW < 1.33*HTMLCSS.linebreakWidth) {\n        var k = this.dataI[i];\n        if (this.data[k]) {\n          if (this.data[k].HTMLbetterBreak(info,state)) {\n            better = true; index = [i].concat(info.index); W = info.W; w = info.w;\n            if (info.penalty === PENALTY.newline) {\n              info.index = index;\n              if (info.nest) {info.nest--}\n              return true}\n          }\n          scanW = (broken ? info.scanW : this.HTMLaddWidth(i,info,scanW));\n        }\n        info.index = []; i++; broken = false;\n      }\n      if (info.nest) {info.nest--}\n      info.index = index;\n      if (better) {info.W = W; info.w = w}\n      return better;\n    },\n    \n    HTMLmoveLine: function (start,end,span,state,values) {\n      var i = start[0], j = end[0];\n      if (i == null) {i = -1}; if (j == null) {j = this.dataI.length-1}\n      if (i === j && start.length > 1) {\n        //\n        //  If starting and ending in the same element move the subpiece to the new line\n        //\n        this.data[this.dataI[i]].HTMLmoveSlice(start.slice(1),end.slice(1),span,state,values,\"paddingLeft\");\n      } else {\n        //\n        //  Otherwise, move the remainder of the initial item\n        //  and any others (including open and separators) up to the last one\n        //\n        var last = state.last; state.last = false; var k = this.dataI[i];\n        while (i < j) {\n          if (this.data[k]) {\n            if (start.length <= 1) {this.data[k].HTMLmoveSpan(span,state,values)}\n              else {this.data[k].HTMLmoveSlice(start.slice(1),[],span,state,values,\"paddingLeft\")}\n          }\n          i++; k = this.dataI[i]; state.first = false; start = [];\n        }\n        //\n        //  If the last item is complete, move it\n        //\n        state.last = last;\n        if (this.data[k]) {\n          if (end.length <= 1) {this.data[k].HTMLmoveSpan(span,state,values)}\n            else {this.data[k].HTMLmoveSlice([],end.slice(1),span,state,values,\"paddingRight\")}\n        }\n      }\n    }\n\n  });\n  \n  /**************************************************************************/\n\n  MML.msubsup.Augment({\n    HTMLbetterBreak: function (info,state) {\n      if (!this.data[this.base]) {return false}\n      //\n      //  Get the current breakpoint position and other data\n      //\n      var index = info.index.slice(0), i = info.index.shift(),\n          W, w, scanW, broken = (info.index.length > 0), better = false;\n      if (!broken) {info.W += info.w; info.w = 0}\n      scanW = info.scanW = info.W;\n      //\n      //  Record the width of the base and the super- and subscripts\n      //\n      if (i == null) {\n        this.HTMLbaseW = this.data[this.base].HTMLspanElement().bbox.w;\n        this.HTMLdw = this.HTMLspanElement().bbox.w - this.HTMLbaseW;\n      }\n      //\n      //  Check if the base can be broken\n      //\n      if (this.data[this.base].HTMLbetterBreak(info,state)) {\n        better = true; index = [this.base].concat(info.index); W = info.W; w = info.w;\n        if (info.penalty === PENALTY.newline) {better = broken = true}\n      }\n      //\n      //  Add in the base if it is unbroken, and add the scripts\n      //\n      if (!broken) {this.HTMLaddWidth(this.base,info,scanW)}\n      info.scanW += this.HTMLdw; info.W = info.scanW;\n      info.index = []; if (better) {info.W = W; info.w = w; info.index = index}\n      return better;\n    },\n    \n    HTMLmoveLine: function (start,end,span,state,values) {\n      //\n      //  Move the proper part of the base\n      //\n      if (this.data[this.base]) {\n        if (start.length > 1) {\n          this.data[this.base].HTMLmoveSlice(start.slice(1),end.slice(1),span,state,values,\"paddingLeft\");\n        } else {\n          if (end.length <= 1) {this.data[this.base].HTMLmoveSpan(span,state,values)}\n            else {this.data[this.base].HTMLmoveSlice([],end.slice(1),span,state,values,\"paddingRight\")}\n        }\n      }\n      //\n      //  If this is the end, check for super and subscripts, and move those\n      //  by moving the stack that contains them, and shifting by the amount of the\n      //  base that has been removed.  Remove the empty base box from the stack.\n      //\n      if (end.length === 0) {\n        var s = this.data[this.sup] || this.data[this.sub];\n        if (s && this.HTMLnotEmpty(s)) {\n          var box = s.HTMLspanElement().parentNode, stack = box.parentNode;\n          if (this.data[this.base]) {stack.removeChild(stack.firstChild)}\n\t  for (box = stack.firstChild; box; box = box.nextSibling)\n\t    {box.style.left = HTMLCSS.Em(HTMLCSS.unEm(box.style.left)-this.HTMLbaseW)}\n          stack.bbox.w -= this.HTMLbaseW; stack.style.width = HTMLCSS.Em(stack.bbox.w);\n          this.HTMLcombineBBoxes(stack,span.bbox);\n          span.appendChild(stack);\n        }\n      }\n    }\n\n  });\n  \n  /**************************************************************************/\n\n  MML.mmultiscripts.Augment({\n    HTMLbetterBreak: function (info,state) {\n      if (!this.data[this.base]) {return false}\n      //\n      //  Get the current breakpoint position and other data\n      //\n      var index = info.index.slice(0); info.index.shift();\n      var W, w, scanW, broken = (info.index.length > 0), better = false;\n      if (!broken) {info.W += info.w; info.w = 0}\n      info.scanW = info.W;\n      //\n      //  Get the bounding boxes and the width of the scripts\n      //\n      var bbox = this.HTMLspanElement().bbox,\n          base = this.data[this.base].HTMLspanElement().bbox;\n      var dw = bbox.w - base.w;\n      //\n      //  Add in the prescripts\n      //  \n      info.scanW += bbox.dx; scanW = info.scanW;\n      //\n      //  Check if the base can be broken\n      //\n      if (this.data[this.base].HTMLbetterBreak(info,state)) {\n        better = true; index = [this.base].concat(info.index); W = info.W; w = info.w;\n        if (info.penalty === PENALTY.newline) {better = broken = true}\n      }\n      //\n      //  Add in the base if it is unbroken, and add the scripts\n      //\n      if (!broken) {this.HTMLaddWidth(this.base,info,scanW)}\n      info.scanW += dw; info.W = info.scanW;\n      info.index = []; if (better) {info.W = W; info.w = w; info.index = index}\n      return better;\n    },\n    \n    HTMLmoveLine: function (start,end,span,state,values) {\n      var SPAN = this.HTMLspanElement(), data = SPAN.bbox,\n          stack = SPAN.firstChild, BOX = {};\n      if (HTMLCSS.msiePaddingWidthBug) {stack = stack.nextSibling}\n      var box = stack.firstChild;\n      \n      //\n      //  Get the boxes for the scripts (if any)\n      //\n      while (box) {\n        if (box.bbox && box.bbox.name) {BOX[box.bbox.name] = box}\n        box = box.nextSibling;\n      }\n      //\n      //  If this is the start, move the prescripts, if any.\n      //\n      if (start.length < 1) {\n        if (BOX.presub || BOX.presup) {\n          var STACK = HTMLCSS.createStack(span);\n          if (BOX.presup) {\n            HTMLCSS.addBox(STACK,BOX.presup);\n            HTMLCSS.placeBox(BOX.presup,data.dx-BOX.presup.bbox.w,data.u);\n          }\n          if (BOX.presub) {\n            HTMLCSS.addBox(STACK,BOX.presub);\n            HTMLCSS.placeBox(BOX.presub,data.dx+data.delta-BOX.presub.bbox.w,-data.v);\n          }\n          this.HTMLcombineBBoxes(STACK,span.bbox);\n          span.appendChild(STACK);\n          STACK.style.width = HTMLCSS.Em(data.dx);\n        }\n      }\n      //\n      //  Move the proper part of the base\n      //\n      if (this.data[this.base]) {\n        if (start.length > 1) {\n          this.data[this.base].HTMLmoveSlice(start.slice(1),end.slice(1),span,state,values,\"paddingLeft\");\n        } else {\n          if (end.length <= 1) {this.data[this.base].HTMLmoveSpan(span,state,values)}\n            else {this.data[this.base].HTMLmoveSlice([],end.slice(1),span,state,values,\"paddingRight\")}\n        }\n      }\n      //\n      //  If this is the end, check for super and subscripts, and move those\n      //  by moving the stack that contains them, and shifting by the amount of the\n      //  base that has been removed.  Remove the empty base box from the stack.\n      //\n      if (end.length === 0) {\n        if (this.data[this.base]) {stack.removeChild(stack.firstChild)}\n        for (box = stack.firstChild; box; box = box.nextSibling)\n\t  {box.style.left = HTMLCSS.Em(HTMLCSS.unEm(box.style.left)-data.px)}\n        stack.bbox.w -= data.px; stack.style.width = HTMLCSS.Em(stack.bbox.w);\n        this.HTMLcombineBBoxes(stack,span.bbox);\n        span.appendChild(stack);\n      }\n    }\n\n  });\n  \n  /**************************************************************************/\n\n  MML.mo.Augment({\n    //\n    //  Override the method for checking line breaks to properly handle <mo>\n    //\n    HTMLbetterBreak: function (info,state) {\n      if (info.values && info.values.id === this.spanID) {return false}\n      var values = this.getValues(\n        \"linebreak\",\"linebreakstyle\",\"lineleading\",\"linebreakmultchar\",\n        \"indentalign\",\"indentshift\",\n        \"indentalignfirst\",\"indentshiftfirst\",\n        \"indentalignlast\",\"indentshiftlast\",\n        \"texClass\", \"fence\"\n      );\n      if (values.linebreakstyle === MML.LINEBREAKSTYLE.INFIXLINEBREAKSTYLE) \n        {values.linebreakstyle = this.Get(\"infixlinebreakstyle\")}\n      //\n      //  Adjust nesting by TeX class (helps output that does not include\n      //  mrows for nesting, but can leave these unbalanced.\n      //\n      if (values.texClass === MML.TEXCLASS.OPEN) {info.nest++}\n      if (values.texClass === MML.TEXCLASS.CLOSE && info.nest) {info.nest--}\n      //\n      //  Get the default penalty for this location\n      //\n      var W = info.scanW, mo = (info.embellished||this); delete info.embellished;\n      var span = mo.HTMLspanElement(), w = span.bbox.w;\n      if (span.style.paddingLeft) {w += HTMLCSS.unEm(span.style.paddingLeft)}\n      if (values.linebreakstyle === MML.LINEBREAKSTYLE.AFTER) {W += w; w = 0}\n      if (W - info.shift === 0 && values.linebreak !== MML.LINEBREAK.NEWLINE)\n        {return false} // don't break at zero width (FIXME?)\n      var offset = HTMLCSS.linebreakWidth - W;\n      // Adjust offest for explicit first-line indent and align\n      if (state.n === 0 && (values.indentshiftfirst !== state.VALUES.indentshiftfirst ||\n          values.indentalignfirst !== state.VALUES.indentalignfirst)) {\n        var align = this.HTMLgetAlign(state,values),\n            shift = this.HTMLgetShift(state,values,align);\n        offset += (info.shift - shift);\n      }\n      //\n      var penalty = Math.floor(offset / HTMLCSS.linebreakWidth * 1000);\n      if (penalty < 0) {penalty = PENALTY.toobig - 3*penalty}\n      if (values.fence) {penalty += PENALTY.fence}\n      if ((values.linebreakstyle === MML.LINEBREAKSTYLE.AFTER &&\n          values.texClass === MML.TEXCLASS.OPEN) ||\n          values.texClass === MML.TEXCLASS.CLOSE) {penalty += PENALTY.close}\n      penalty += info.nest * PENALTY.nestfactor;\n      //\n      //  Get the penalty for this type of break and\n      //    use it to modify the default penalty\n      //\n      var linebreak = PENALTY[values.linebreak||MML.LINEBREAK.AUTO];\n      if (!(linebreak instanceof Array)) {\n        //  for breaks past the width, don't modify penalty\n        if (offset >= 0) {penalty = linebreak * info.nest}\n      } else {penalty = Math.max(1,penalty + linebreak[0] * info.nest)}\n      //\n      //  If the penalty is no better than the current one, return false\n      //  Otherwise save the data for this breakpoint and return true\n      //\n      if (penalty >= info.penalty) {return false}\n      info.penalty = penalty; info.values = values; info.W = W; info.w = w;\n      values.lineleading = HTMLCSS.length2em(values.lineleading,1,state.VALUES.lineleading);\n      values.id = this.spanID;\n      return true;\n    }\n  });\n  \n  /**************************************************************************/\n\n  MML.mspace.Augment({\n    //\n    //  Override the method for checking line breaks to properly handle <mspace>\n    //\n    HTMLbetterBreak: function (info,state) {\n      if (info.values && info.values.id === this.spanID) {return false}\n      var values = this.getValues(\"linebreak\");\n      var linebreakValue = values.linebreak;\n      if (!linebreakValue || this.hasDimAttr()) {\n        // The MathML spec says that the linebreak attribute should be ignored\n        // if any dimensional attribute is set.\n        linebreakValue = MML.LINEBREAK.AUTO;\n      }\n      //\n      //  Get the default penalty for this location\n      //\n      var W = info.scanW, span = this.HTMLspanElement(), w = span.bbox.w;\n      if (span.style.paddingLeft) {w += HTMLCSS.unEm(span.style.paddingLeft)}\n      if (W - info.shift === 0) {return false} // don't break at zero width (FIXME?)\n      var offset = HTMLCSS.linebreakWidth - W;\n      //\n      var penalty = Math.floor(offset / HTMLCSS.linebreakWidth * 1000);\n      if (penalty < 0) {penalty = PENALTY.toobig - 3*penalty}\n      penalty += info.nest * PENALTY.nestfactor;\n      //\n      //  Get the penalty for this type of break and\n      //    use it to modify the default penalty\n      //\n      var linebreak = PENALTY[linebreakValue];\n      if (linebreakValue === MML.LINEBREAK.AUTO && w >= PENALTY.spacelimit &&\n          !this.mathbackground && !this.background)\n        {linebreak = [(w+PENALTY.spaceoffset)*PENALTY.spacefactor]}\n      if (!(linebreak instanceof Array)) {\n        //  for breaks past the width, don't modify penalty\n        if (offset >= 0) {penalty = linebreak * info.nest}\n      } else {penalty = Math.max(1,penalty + linebreak[0] * info.nest)}\n      //\n      //  If the penalty is no better than the current one, return false\n      //  Otherwise save the data for this breakpoint and return true\n      //\n      if (penalty >= info.penalty) {return false}\n      info.penalty = penalty; info.values = values; info.W = W; info.w = w;\n      values.lineleading = state.VALUES.lineleading;\n      values.linebreakstyle = \"before\"; values.id = this.spanID;\n      return true;\n    }\n  });\n  \n  //\n  //  Hook into the mathchoice extension\n  //\n  MathJax.Hub.Register.StartupHook(\"TeX mathchoice Ready\",function () {\n    MML.TeXmathchoice.Augment({\n      HTMLbetterBreak: function (info,state) {\n        return this.Core().HTMLbetterBreak(info,state);\n      },\n      HTMLmoveLine: function (start,end,span,state,values) {\n        return this.Core().HTMLmoveSlice(start,end,span,state,values);\n      }\n    });\n  });\n  \n  //\n  //  Have maction process only the selected item\n  //\n  MML.maction.Augment({\n    HTMLbetterBreak: function (info,state) {\n      return this.Core().HTMLbetterBreak(info,state);\n    },\n    HTMLmoveLine: function (start,end,span,state,values) {\n      return this.Core().HTMLmoveSlice(start,end,span,state,values);\n    },\n    //\n    //  Split and move the hit boxes as well\n    //\n    HTMLmoveSlice: function (start,end,span,state,values,padding) {\n      var hitbox = document.getElementById(\"MathJax-HitBox-\"+this.spanID+HTMLCSS.idPostfix);\n      if (hitbox) {hitbox.parentNode.removeChild(hitbox)}\n      var slice = this.SUPER(arguments).HTMLmoveSlice.apply(this,arguments);\n      if (end.length === 0) {\n        span = this.HTMLspanElement(); var n = 0;\n        while (span) {\n          hitbox = this.HTMLhandleHitBox(span,\"-Continue-\"+n);\n          span = span.nextMathJaxSpan; n++;\n        }\n      }\n      return slice;\n    }\n  });\n  \n  //\n  //  Have semantics only do the first element\n  //  (FIXME:  do we need to do anything special about annotation-xml?)\n  //\n  MML.semantics.Augment({\n    HTMLbetterBreak: function (info,state) {\n      return (this.data[0] ? this.data[0].HTMLbetterBreak(info,state) : false);\n    },\n    HTMLmoveLine: function (start,end,span,state,values) {\n      return (this.data[0] ? this.data[0].HTMLmoveSlice(start,end,span,state,values) : null);\n    }\n  });\n  \n  /**************************************************************************/\n\n  MathJax.Hub.Startup.signal.Post(\"HTML-CSS multiline Ready\");\n  MathJax.Ajax.loadComplete(HTMLCSS.autoloadDir+\"/multiline.js\");\n  \n});\n\n"]}]}